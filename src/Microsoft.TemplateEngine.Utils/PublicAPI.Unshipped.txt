const Microsoft.TemplateEngine.Utils.MultiValueParameter.MultiValueSeparator = '|' -> char
Microsoft.TemplateEngine.Utils.BaselineInfo
Microsoft.TemplateEngine.Utils.BaselineInfo.BaselineInfo(System.Collections.Generic.IReadOnlyDictionary<string!, string!>! defaultOverrides, string? description = null) -> void
Microsoft.TemplateEngine.Utils.BaselineInfo.DefaultOverrides.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
Microsoft.TemplateEngine.Utils.BaselineInfo.Description.get -> string?
Microsoft.TemplateEngine.Utils.CombinedList<T>.CombinedList(System.Collections.Generic.IReadOnlyList<T>! first, System.Collections.Generic.IReadOnlyList<T>! second) -> void
Microsoft.TemplateEngine.Utils.CombinedList<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
Microsoft.TemplateEngine.Utils.ContentGenerationException.ContentGenerationException(string! message) -> void
Microsoft.TemplateEngine.Utils.ContentGenerationException.ContentGenerationException(string! message, System.Exception! innerException) -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.DefaultTemplateEngineHost(string! hostIdentifier, string! version) -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.DefaultTemplateEngineHost(string! hostIdentifier, string! version, System.Collections.Generic.Dictionary<string!, string!>! defaults, System.Collections.Generic.IReadOnlyList<string!>! fallbackHostTemplateConfigNames) -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.DefaultTemplateEngineHost(string! hostIdentifier, string! version, System.Collections.Generic.Dictionary<string!, string!>? defaults) -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.DefaultTemplateEngineHost(string! hostIdentifier, string! version, System.Collections.Generic.Dictionary<string!, string!>? defaults, System.Collections.Generic.IReadOnlyList<(System.Type! InterfaceType, Microsoft.TemplateEngine.Abstractions.IIdentifiedComponent! Instance)>? builtIns) -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.DefaultTemplateEngineHost(string! hostIdentifier, string! version, System.Collections.Generic.Dictionary<string!, string!>? defaults, System.Collections.Generic.IReadOnlyList<(System.Type! InterfaceType, Microsoft.TemplateEngine.Abstractions.IIdentifiedComponent! Instance)>? builtIns, System.Collections.Generic.IReadOnlyList<string!>? fallbackHostTemplateConfigNames) -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.FallbackHostTemplateConfigNames.get -> System.Collections.Generic.IReadOnlyList<string!>!
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.FileSystem.get -> Microsoft.TemplateEngine.Abstractions.PhysicalFileSystem.IPhysicalFileSystem!
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.HostIdentifier.get -> string!
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.LogDiagnosticMessage(string! message, string! category, params string![]! details) -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.Logger.get -> Microsoft.Extensions.Logging.ILogger!
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.LoggerFactory.get -> Microsoft.Extensions.Logging.ILoggerFactory!
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.LogTiming(string! label, System.TimeSpan duration, int depth) -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.OnConfirmPartialMatch(string! name) -> bool
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.OnLogTiming.get -> System.Action<string!, System.TimeSpan, int>?
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.OnLogTiming.set -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.OnPotentiallyDestructiveChangesDetected(System.Collections.Generic.IReadOnlyList<Microsoft.TemplateEngine.Abstractions.IFileChange!>! changes, System.Collections.Generic.IReadOnlyList<Microsoft.TemplateEngine.Abstractions.IFileChange!>! destructiveChanges) -> bool
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.RegisterDiagnosticLogger(string! category, System.Action<string!, string![]!>! messageHandler) -> void
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.Version.get -> string!
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.VirtualizeDirectory(string! path) -> void
Microsoft.TemplateEngine.Utils.DirectedGraph<T>
Microsoft.TemplateEngine.Utils.DirectedGraph<T>.DirectedGraph(System.Collections.Generic.Dictionary<T, System.Collections.Generic.HashSet<T>!>! dependenciesMap) -> void
Microsoft.TemplateEngine.Utils.DirectedGraph<T>.GetDependands(System.Collections.Generic.IEnumerable<T>! vertices) -> System.Collections.Generic.IEnumerable<T>!
Microsoft.TemplateEngine.Utils.DirectedGraph<T>.GetSubGraphDependandOnVertices(System.Collections.Generic.IReadOnlyList<T>! vertices, bool includeSeedVertices = false) -> Microsoft.TemplateEngine.Utils.DirectedGraph<T>!
Microsoft.TemplateEngine.Utils.DirectedGraph<T>.HasCycle(out System.Collections.Generic.IReadOnlyList<T>! cycle) -> bool
Microsoft.TemplateEngine.Utils.DirectedGraph<T>.TryGetTopologicalSort(out System.Collections.Generic.IReadOnlyList<T>! sortedElements) -> bool
Microsoft.TemplateEngine.Utils.EngineInitializationException.EngineInitializationException(string! message, string! settingsItem) -> void
Microsoft.TemplateEngine.Utils.EngineInitializationException.EngineInitializationException(string! message, string! settingsItem, System.Exception! innerException) -> void
Microsoft.TemplateEngine.Utils.EngineInitializationException.SettingsItem.get -> string!
Microsoft.TemplateEngine.Utils.Glob.IsMatch(string! test) -> bool
Microsoft.TemplateEngine.Utils.InMemoryFileSystem.PathRelativeTo(string! target, string! relativeTo) -> string!
Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.Dispose() -> void
Microsoft.TemplateEngine.Utils.EnumerableExtensions
Microsoft.TemplateEngine.Utils.MultiValueParameter
Microsoft.TemplateEngine.Utils.MultiValueParameter.Equals(Microsoft.TemplateEngine.Utils.MultiValueParameter! other) -> bool
Microsoft.TemplateEngine.Utils.MultiValueParameter.MultiValueParameter(System.Collections.Generic.IReadOnlyList<string!>! values) -> void
Microsoft.TemplateEngine.Utils.MultiValueParameter.Values.get -> System.Collections.Generic.IReadOnlyList<string!>!
Microsoft.TemplateEngine.Utils.ParameterSetDataExtensions
Microsoft.TemplateEngine.Utils.PhysicalFileSystem.PathRelativeTo(string! target, string! relativeTo) -> string!
Microsoft.TemplateEngine.Utils.RuntimeValueUtil
Microsoft.TemplateEngine.Utils.TemplateAuthoringException.ConfigItem.get -> string!
Microsoft.TemplateEngine.Utils.TemplateAuthoringException.TemplateAuthoringException(string! message, string! configItem) -> void
Microsoft.TemplateEngine.Utils.TemplateAuthoringException.TemplateAuthoringException(string! message, string! configItem, System.Exception! innerException) -> void
Microsoft.TemplateEngine.Utils.TemplateParameter.AllowMultipleValues.get -> bool
Microsoft.TemplateEngine.Utils.TemplateParameter.Equals(Microsoft.TemplateEngine.Abstractions.ITemplateParameter! other) -> bool
Microsoft.TemplateEngine.Utils.TemplateParameter.Precedence.get -> Microsoft.TemplateEngine.Abstractions.TemplateParameterPrecedence!
Microsoft.TemplateEngine.Utils.TemplateParameter.TemplateParameter(string! name, string! type, string! datatype, Microsoft.TemplateEngine.Abstractions.TemplateParameterPrecedence? precedence = null, bool isName = false, string? defaultValue = null, string? defaultIfOptionWithoutValue = null, string? description = null, string? displayName = null, bool allowMultipleValues = false, System.Collections.Generic.IReadOnlyDictionary<string!, Microsoft.TemplateEngine.Abstractions.ParameterChoice!>? choices = null) -> void
Microsoft.TemplateEngine.Utils.Timing.Timing(Microsoft.Extensions.Logging.ILogger! logger, string! label) -> void
override Microsoft.TemplateEngine.Utils.ExactVersionSpecification.ToString() -> string!
override Microsoft.TemplateEngine.Utils.MultiValueParameter.Equals(object? obj) -> bool
override Microsoft.TemplateEngine.Utils.MultiValueParameter.GetHashCode() -> int
override Microsoft.TemplateEngine.Utils.MultiValueParameter.ToString() -> string!
override Microsoft.TemplateEngine.Utils.TemplateParameter.Equals(object! obj) -> bool
override Microsoft.TemplateEngine.Utils.TemplateParameter.GetHashCode() -> int
override Microsoft.TemplateEngine.Utils.TemplateParameter.ToString() -> string!
static Microsoft.TemplateEngine.Utils.ArrayExtensions.CombineArrays<T>(params T[]![]! arrayList) -> T[]!
static Microsoft.TemplateEngine.Utils.DictionaryExtensions.CloneIfDifferentComparer<T>(this System.Collections.Generic.IReadOnlyDictionary<string!, T>! source, System.StringComparer! comparer) -> System.Collections.Generic.IReadOnlyDictionary<string!, T>!
static Microsoft.TemplateEngine.Utils.DirectedGraph<T>.implicit operator Microsoft.TemplateEngine.Utils.DirectedGraph<T>!(System.Collections.Generic.Dictionary<T, System.Collections.Generic.HashSet<T>!>! dependenciesMap) -> Microsoft.TemplateEngine.Utils.DirectedGraph<T>!
static Microsoft.TemplateEngine.Utils.EnumerableExtensions.AddRange<T>(this System.Collections.Generic.Queue<T>! queue, System.Collections.Generic.IEnumerable<T>! elements) -> void
static Microsoft.TemplateEngine.Utils.EnumerableExtensions.ForEach<T>(this System.Collections.Generic.IEnumerable<T>! sequence, System.Action<T>! action) -> void
static Microsoft.TemplateEngine.Utils.EnumerableExtensions.GetDuplicates<T>(this System.Collections.Generic.IEnumerable<T>? sequence, System.Collections.Generic.IEqualityComparer<T>? comparer = null) -> System.Collections.Generic.IEnumerable<T>!
static Microsoft.TemplateEngine.Utils.EnumerableExtensions.HasDuplicates<T>(this System.Collections.Generic.IEnumerable<T>? sequence, System.Collections.Generic.IEqualityComparer<T>? comparer = null) -> bool
static Microsoft.TemplateEngine.Utils.EnumerableExtensions.ToCsvString<T>(this System.Collections.Generic.IEnumerable<T>? source, bool useSpace = true) -> string!
static Microsoft.TemplateEngine.Utils.EqualityExtensions.AllAreTheSame<T, TValue>(this System.Collections.Generic.IEnumerable<T>! items, System.Func<T, TValue?>! selector) -> bool
static Microsoft.TemplateEngine.Utils.EqualityExtensions.AllAreTheSame<T, TValue>(this System.Collections.Generic.IEnumerable<T>! items, System.Func<T, TValue?>! selector, System.Collections.Generic.IEqualityComparer<TValue?>! comparer) -> bool
static Microsoft.TemplateEngine.Utils.EqualityExtensions.AllAreTheSame<T, TValue>(this System.Collections.Generic.IEnumerable<T>! items, System.Func<T, TValue?>! selector, System.Func<TValue?, TValue?, bool>! comparer) -> bool
static Microsoft.TemplateEngine.Utils.FileFindHelpers.FindFilesAtOrAbovePath(Microsoft.TemplateEngine.Abstractions.PhysicalFileSystem.IPhysicalFileSystem! fileSystem, string! startPath, string! matchPattern, System.Func<string!, bool>? secondaryFilter = null) -> System.Collections.Generic.IReadOnlyList<string!>!
static Microsoft.TemplateEngine.Utils.FileSystemInfoExtensions.CombinePaths(this string! basePath, params string![]! paths) -> string!
static Microsoft.TemplateEngine.Utils.FileSystemInfoExtensions.CopyTo(this Microsoft.TemplateEngine.Abstractions.Mount.IDirectory! source, string! target) -> void
static Microsoft.TemplateEngine.Utils.FileSystemInfoExtensions.DirectoryInfo(this Microsoft.TemplateEngine.Abstractions.Mount.IFileSystemInfo! info, string! path) -> Microsoft.TemplateEngine.Abstractions.Mount.IDirectory?
static Microsoft.TemplateEngine.Utils.FileSystemInfoExtensions.FileInfo(this Microsoft.TemplateEngine.Abstractions.Mount.IFileSystemInfo! info, string! path) -> Microsoft.TemplateEngine.Abstractions.Mount.IFile?
static Microsoft.TemplateEngine.Utils.FileSystemInfoExtensions.FileSystemInfo(this Microsoft.TemplateEngine.Abstractions.Mount.IFileSystemInfo! info, string! path) -> Microsoft.TemplateEngine.Abstractions.Mount.IFileSystemInfo?
static Microsoft.TemplateEngine.Utils.FileSystemInfoExtensions.NormalizePath(this string! path) -> string!
static Microsoft.TemplateEngine.Utils.FileSystemInfoExtensions.PathRelativeTo(this Microsoft.TemplateEngine.Abstractions.Mount.IFileSystemInfo! info, Microsoft.TemplateEngine.Abstractions.Mount.IFileSystemInfo! relativeTo) -> string!
static Microsoft.TemplateEngine.Utils.Glob.Parse(string! pattern, bool canBeNameOnlyMatch = true) -> Microsoft.TemplateEngine.Utils.Glob!
static Microsoft.TemplateEngine.Utils.ListExtensions.GroupBy<TElement, TKey>(this System.Collections.Generic.IEnumerable<TElement>! elements, System.Func<TElement, TKey?>! grouper, System.Func<TElement, bool>! hasGroupKey, System.Collections.Generic.IEqualityComparer<TKey?>? comparer = null) -> System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey?, TElement>!>!
static Microsoft.TemplateEngine.Utils.MultiValueParameter.MultiValueSeparators.get -> char[]!
static Microsoft.TemplateEngine.Utils.MultiValueParameter.TryPerformMultiValueEqual(object! x, object! y, out bool result) -> bool
static Microsoft.TemplateEngine.Utils.ParameterSetDataExtensions.ToParameterSetData(this Microsoft.TemplateEngine.Abstractions.IParameterSet! parameterSet) -> Microsoft.TemplateEngine.Abstractions.Parameters.IParameterSetData!
static Microsoft.TemplateEngine.Utils.ParserExtensions.ConvertToDoubleCurrentOrInvariant(object! value) -> double
static Microsoft.TemplateEngine.Utils.ParserExtensions.DoubleTryParseСurrentOrInvariant(string? stringValue, out double doubleValue) -> bool
static Microsoft.TemplateEngine.Utils.RuntimeValueUtil.TryGetRuntimeValue(this Microsoft.TemplateEngine.Abstractions.IParameterSet! parameters, Microsoft.TemplateEngine.Abstractions.IEngineEnvironmentSettings! environmentSettings, string! name, out object? value, bool skipEnvironmentVariableSearch = false) -> bool
static Microsoft.TemplateEngine.Utils.TemplateParameterExtensions.IsValidMultiValueParameterValue(this string! value) -> bool
static Microsoft.TemplateEngine.Utils.TemplateParameterExtensions.TokenizeMultiValueParameter(this string! literal) -> System.Collections.Generic.IReadOnlyList<string!>!
override Microsoft.TemplateEngine.Utils.RangeVersionSpecification.ToString() -> string!
static Microsoft.TemplateEngine.Utils.Timing.Over(Microsoft.Extensions.Logging.ILogger! logger, string! label) -> Microsoft.TemplateEngine.Utils.Timing!
static Microsoft.TemplateEngine.Utils.VersionStringHelpers.CompareVersions(string! version1, string! version2) -> int?
static Microsoft.TemplateEngine.Utils.VersionStringHelpers.IsVersionWellFormed(string! version) -> bool
static Microsoft.TemplateEngine.Utils.VersionStringHelpers.TryParseVersionSpecification(string! versionString, out Microsoft.TemplateEngine.Utils.IVersionSpecification? specification) -> bool
static Microsoft.TemplateEngine.Utils.WellKnownSearchFilters.AuthorFilter(string? author) -> System.Func<Microsoft.TemplateEngine.Abstractions.ITemplateInfo!, Microsoft.TemplateEngine.Abstractions.TemplateFiltering.MatchInfo?>!
static Microsoft.TemplateEngine.Utils.WellKnownSearchFilters.BaselineFilter(string? baselineName) -> System.Func<Microsoft.TemplateEngine.Abstractions.ITemplateInfo!, Microsoft.TemplateEngine.Abstractions.TemplateFiltering.MatchInfo?>!
static Microsoft.TemplateEngine.Utils.WellKnownSearchFilters.ClassificationFilter(string? classification) -> System.Func<Microsoft.TemplateEngine.Abstractions.ITemplateInfo!, Microsoft.TemplateEngine.Abstractions.TemplateFiltering.MatchInfo?>!
static Microsoft.TemplateEngine.Utils.WellKnownSearchFilters.ConstraintFilters(System.Collections.Generic.IEnumerable<Microsoft.TemplateEngine.Abstractions.Constraints.ITemplateConstraint!>! constraintDefinitions) -> System.Collections.Generic.IEnumerable<System.Func<Microsoft.TemplateEngine.Abstractions.ITemplateInfo!, Microsoft.TemplateEngine.Abstractions.TemplateFiltering.MatchInfo?>!>!
static Microsoft.TemplateEngine.Utils.WellKnownSearchFilters.LanguageFilter(string? language) -> System.Func<Microsoft.TemplateEngine.Abstractions.ITemplateInfo!, Microsoft.TemplateEngine.Abstractions.TemplateFiltering.MatchInfo?>!
virtual Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.BuiltInComponents.get -> System.Collections.Generic.IReadOnlyList<(System.Type! InterfaceType, Microsoft.TemplateEngine.Abstractions.IIdentifiedComponent! Instance)>!
virtual Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.LogMessage(string! message) -> void
virtual Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.OnCriticalError(string! code, string! message, string! currentFile, long currentPosition) -> void
virtual Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.OnNonCriticalError(string! code, string! message, string! currentFile, long currentPosition) -> bool
virtual Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.OnParameterError(Microsoft.TemplateEngine.Abstractions.ITemplateParameter! parameter, string! receivedValue, string! message, out string? newValue) -> bool
virtual Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.OnSymbolUsed(string! symbol, object! value) -> void
virtual Microsoft.TemplateEngine.Utils.DefaultTemplateEngineHost.TryGetHostParamDefault(string! paramName, out string! value) -> bool
