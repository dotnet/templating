Microsoft.TemplateEngine.Core.ParameterSetBuilder
Microsoft.TemplateEngine.Core.ParameterSetBuilder.Build() -> Microsoft.TemplateEngine.Abstractions.Parameters.IEvaluatedParameterSetData!
Microsoft.TemplateEngine.Core.ParameterSetBuilder.EvaluateConditionalParameters(Microsoft.Extensions.Logging.ILogger! logger) -> void
Microsoft.TemplateEngine.Core.ParameterSetBuilder.HasParameterValue(Microsoft.TemplateEngine.Abstractions.ITemplateParameter! parameter) -> bool
Microsoft.TemplateEngine.Core.ParameterSetBuilder.ParameterDefinitions.get -> System.Collections.Generic.IEnumerable<Microsoft.TemplateEngine.Abstractions.ITemplateParameter!>!
Microsoft.TemplateEngine.Core.ParameterSetBuilder.ResolvedValues.get -> System.Collections.Generic.IDictionary<Microsoft.TemplateEngine.Abstractions.ITemplateParameter!, object!>!
Microsoft.TemplateEngine.Core.ParameterSetBuilder.SetParameterEvaluation(Microsoft.TemplateEngine.Abstractions.ITemplateParameter! parameter, Microsoft.TemplateEngine.Abstractions.Parameters.EvaluatedParameterData! evaluatedParameterData) -> void
Microsoft.TemplateEngine.Core.ParameterSetBuilder.SetParameterValue(Microsoft.TemplateEngine.Abstractions.ITemplateParameter! parameter, object! value) -> void
Microsoft.TemplateEngine.Core.ParameterSetBuilder.TryGetParameterDefinition(string! name, out Microsoft.TemplateEngine.Abstractions.ITemplateParameter! parameter) -> bool
Microsoft.TemplateEngine.Core.Util.EngineConfig.EngineConfig(Microsoft.Extensions.Logging.ILogger! logger, Microsoft.TemplateEngine.Core.Contracts.IVariableCollection! variables) -> void
Microsoft.TemplateEngine.Core.Util.EngineConfig.EngineConfig(Microsoft.Extensions.Logging.ILogger! logger, Microsoft.TemplateEngine.Core.Contracts.IVariableCollection! variables, string! variableFormatString) -> void
Microsoft.TemplateEngine.Core.Util.EngineConfig.EngineConfig(Microsoft.Extensions.Logging.ILogger! logger, System.Collections.Generic.IReadOnlyList<string!>! whitespaces, System.Collections.Generic.IReadOnlyList<string!>! lineEndings, Microsoft.TemplateEngine.Core.Contracts.IVariableCollection! variables, string! variableFormatString = "{0}") -> void
Microsoft.TemplateEngine.Core.Util.EngineConfig.Flags.get -> System.Collections.Generic.IDictionary<string!, bool>!
Microsoft.TemplateEngine.Core.Util.EngineConfig.LineEndings.get -> System.Collections.Generic.IReadOnlyList<string!>!
Microsoft.TemplateEngine.Core.Util.EngineConfig.Logger.get -> Microsoft.Extensions.Logging.ILogger!
Microsoft.TemplateEngine.Core.Util.EngineConfig.VariableFormatString.get -> string!
Microsoft.TemplateEngine.Core.Util.EngineConfig.Variables.get -> Microsoft.TemplateEngine.Core.Contracts.IVariableCollection!
Microsoft.TemplateEngine.Core.Util.EngineConfig.Whitespaces.get -> System.Collections.Generic.IReadOnlyList<string!>!
Microsoft.TemplateEngine.Core.Util.Orchestrator.GetFileChanges(string! runSpecPath, Microsoft.TemplateEngine.Abstractions.Mount.IDirectory! sourceDir, string! targetDir) -> System.Collections.Generic.IReadOnlyList<Microsoft.TemplateEngine.Abstractions.IFileChange2!>!
Microsoft.TemplateEngine.Core.Util.Orchestrator.GetFileChanges(Microsoft.TemplateEngine.Core.Contracts.IGlobalRunSpec! spec, Microsoft.TemplateEngine.Abstractions.Mount.IDirectory! sourceDir, string! targetDir) -> System.Collections.Generic.IReadOnlyList<Microsoft.TemplateEngine.Abstractions.IFileChange2!>!
Microsoft.TemplateEngine.Core.Util.Orchestrator.Run(string! runSpecPath, Microsoft.TemplateEngine.Abstractions.Mount.IDirectory! sourceDir, string! targetDir) -> void
Microsoft.TemplateEngine.Core.Util.Orchestrator.Orchestrator(Microsoft.Extensions.Logging.ILogger! logger, Microsoft.TemplateEngine.Abstractions.PhysicalFileSystem.IPhysicalFileSystem! fileSystem) -> void
Microsoft.TemplateEngine.Core.Util.Orchestrator.Run(Microsoft.TemplateEngine.Core.Contracts.IGlobalRunSpec! spec, Microsoft.TemplateEngine.Abstractions.Mount.IDirectory! sourceDir, string! targetDir) -> void
static Microsoft.TemplateEngine.Core.Expressions.Cpp.CppStyleEvaluatorDefinition.EvaluateFromString(Microsoft.Extensions.Logging.ILogger! logger, string! text, Microsoft.TemplateEngine.Core.Contracts.IVariableCollection! variables) -> bool
static Microsoft.TemplateEngine.Core.Expressions.Cpp.CppStyleEvaluatorDefinition.Evaluate(Microsoft.TemplateEngine.Core.Contracts.IProcessorState! processor, ref int bufferLength, ref int currentBufferPosition, out bool faulted) -> bool
static Microsoft.TemplateEngine.Core.ParameterSetBuilder.CreateWithDefaults(Microsoft.TemplateEngine.Abstractions.Parameters.IParametersDefinition! parametersDefinition, Microsoft.TemplateEngine.Abstractions.IEngineEnvironmentSettings! environment, string? name = null) -> Microsoft.TemplateEngine.Abstractions.Parameters.IParameterSetBuilder!
static Microsoft.TemplateEngine.Core.ParameterSetBuilder.CreateWithDefaults(Microsoft.TemplateEngine.Abstractions.Parameters.IParametersDefinition! parametersDefinition, string? name, Microsoft.TemplateEngine.Abstractions.IEngineEnvironmentSettings! environment, out System.Collections.Generic.IReadOnlyList<string!>! paramsWithInvalidValues) -> Microsoft.TemplateEngine.Abstractions.Parameters.IParameterSetBuilder!
static Microsoft.TemplateEngine.Core.Util.EngineConfig.DefaultLineEndings.get -> System.Collections.Generic.IReadOnlyList<string!>!
static Microsoft.TemplateEngine.Core.Util.EngineConfig.DefaultLineEndings.set -> void
static Microsoft.TemplateEngine.Core.Util.EngineConfig.DefaultWhitespaces.get -> System.Collections.Generic.IReadOnlyList<string!>!
static Microsoft.TemplateEngine.Core.Util.EngineConfig.DefaultWhitespaces.set -> void
virtual Microsoft.TemplateEngine.Core.Util.Orchestrator.RunSpecLoader(System.IO.Stream! runSpec) -> Microsoft.TemplateEngine.Core.Contracts.IGlobalRunSpec!
virtual Microsoft.TemplateEngine.Core.Util.Orchestrator.TryGetBufferSize(Microsoft.TemplateEngine.Abstractions.Mount.IFile! sourceFile, out int bufferSize) -> bool
virtual Microsoft.TemplateEngine.Core.Util.Orchestrator.TryGetFlushThreshold(Microsoft.TemplateEngine.Abstractions.Mount.IFile! sourceFile, out int threshold) -> bool
~Microsoft.TemplateEngine.Core.Expressions.Token<TToken>.Token(TToken family, object value) -> void
~Microsoft.TemplateEngine.Core.Expressions.Token<TToken>.Value.get -> object
~Microsoft.TemplateEngine.Core.Expressions.ScopeBuilder<TOperator, TToken>.Build(ref int bufferLength, ref int bufferPosition, System.Action<System.Collections.Generic.IReadOnlyList<byte>> onFault, System.Collections.Generic.HashSet<int> referencedVariablesIndexes = null) -> Microsoft.TemplateEngine.Core.Expressions.IEvaluable
~static Microsoft.TemplateEngine.Core.Expressions.Shared.SharedEvaluatorDefinition<TSelf, TTokens>.Evaluate(Microsoft.TemplateEngine.Core.Contracts.IProcessorState processor, ref int bufferLength, ref int currentBufferPosition, out bool faulted) -> bool
~static Microsoft.TemplateEngine.Core.Expressions.Shared.SharedEvaluatorDefinition<TSelf, TTokens>.Evaluate(Microsoft.TemplateEngine.Core.Contracts.IProcessorState processor, ref int bufferLength, ref int currentBufferPosition, out bool faulted, System.Collections.Generic.HashSet<int> referencedVariablesIndexes) -> bool
~static Microsoft.TemplateEngine.Core.Expressions.Shared.SharedEvaluatorDefinition<TSelf, TTokens>.EvaluateFromString(Microsoft.Extensions.Logging.ILogger logger, string text, Microsoft.TemplateEngine.Core.Contracts.IVariableCollection variables, System.Collections.Generic.HashSet<int> referencedVariablesIndexes = null) -> bool
~static Microsoft.TemplateEngine.Core.VariableCollection.SetupVariables(Microsoft.TemplateEngine.Abstractions.IEngineEnvironmentSettings environmentSettings, Microsoft.TemplateEngine.Abstractions.Parameters.IEvaluatedParameterSetData parameters, Microsoft.TemplateEngine.Core.Contracts.IVariableConfig variableConfig) -> Microsoft.TemplateEngine.Core.Contracts.IVariableCollection
~static Microsoft.TemplateEngine.Core.VariableCollection.VariableCollectionFromParameters(Microsoft.TemplateEngine.Abstractions.Parameters.IEvaluatedParameterSetData parameters, string format) -> Microsoft.TemplateEngine.Core.VariableCollection
