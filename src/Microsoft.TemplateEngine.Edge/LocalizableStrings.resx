<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FolderInstaller_InstallResult_Error_FolderDoesNotExist" xml:space="preserve">
    <value>The folder {0} doesn't exist.</value>
  </data>
  <data name="Generic_LatestVersion" xml:space="preserve">
    <value>latest version</value>
    <comment>small letters, string is used in the sentence</comment>
  </data>
  <data name="Generic_Version" xml:space="preserve">
    <value>version {0}</value>
    <comment>small letters, string is used in the sentence</comment>
  </data>
  <data name="GlobalSettingsTemplatePackageProvider_InstallResult_Error_MultipleInstallersCanBeUsed" xml:space="preserve">
    <value>{0} can be installed by several installers. Specify the installer name to be used.</value>
  </data>
  <data name="GlobalSettingsTemplatePackageProvider_InstallResult_Error_PackageAlreadyInstalled" xml:space="preserve">
    <value>{0} is already installed.</value>
  </data>
  <data name="GlobalSettingsTemplatePackageProvider_InstallResult_Error_PackageCannotBeInstalled" xml:space="preserve">
    <value>{0} cannot be installed.</value>
  </data>
  <data name="GlobalSettingsTemplatePackagesProvider_Info_PackageAlreadyInstalled" xml:space="preserve">
    <value>{0} is already installed, version: {1}, it will be replaced with {2}.</value>
  </data>
  <data name="GlobalSettingsTemplatePackagesProvider_Info_PackageUninstalled" xml:space="preserve">
    <value>{0} was successfully uninstalled.</value>
  </data>
  <data name="NuGetApiPackageManager_Error_FailedToLoadSource" xml:space="preserve">
    <value>Failed to load the NuGet source {0}.</value>
  </data>
  <data name="NuGetApiPackageManager_Error_FailedToLoadSources" xml:space="preserve">
    <value>Failed to load NuGet sources configured for the folder {0}.</value>
  </data>
  <data name="NuGetApiPackageManager_Error_FailedToReadPackage" xml:space="preserve">
    <value>Failed to read package information from NuGet source {0}.</value>
  </data>
  <data name="NuGetApiPackageManager_Error_FileAlreadyExists" xml:space="preserve">
    <value>File {0} already exists.</value>
  </data>
  <data name="NuGetApiPackageManager_Error_NoSources" xml:space="preserve">
    <value>No NuGet sources are defined or enabled.</value>
  </data>
  <data name="NuGetApiPackageManager_Warning_FailedToDelete" xml:space="preserve">
    <value>Failed to remove {0} after failed download. Remove the file manually if it exists.</value>
  </data>
  <data name="NuGetApiPackageManager_Warning_FailedToDownload" xml:space="preserve">
    <value>Failed to download {0} from NuGet feed {1}.</value>
  </data>
  <data name="NuGetApiPackageManager_Warning_FailedToLoadSource" xml:space="preserve">
    <value>Failed to load NuGet source {0}: the source is not valid. It will be skipped in further processing.</value>
  </data>
  <data name="NuGetApiPackageManager_Warning_PackageNotFound" xml:space="preserve">
    <value>{0} is not found in NuGet feeds {1}.</value>
  </data>
  <data name="NuGetInstaller_Error_CopyFailed" xml:space="preserve">
    <value>Failed to copy package {0} to {1}.</value>
  </data>
  <data name="NuGetInstaller_Error_FailedToReadPackage" xml:space="preserve">
    <value>Failed to read content of package {0}.</value>
  </data>
  <data name="NuGetInstaller_Error_FileAlreadyExists" xml:space="preserve">
    <value>File {0} already exists.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_DownloadFailed" xml:space="preserve">
    <value>Failed to download {0} from {1}.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_InstallGeneric" xml:space="preserve">
    <value>Failed to install the package {0}.
Details: {1}.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_InstallRequestNotSupported" xml:space="preserve">
    <value>The install request {0} cannot be processed by installer {1}.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_InvalidPackage" xml:space="preserve">
    <value>The NuGet package {0} is invalid.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_InvalidSources" xml:space="preserve">
    <value>The configured NuGet sources are invalid: {0}.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_InvalidSources_None" xml:space="preserve">
    <value>No NuGet sources are configured.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_OperationCancelled" xml:space="preserve">
    <value>The operation was cancelled.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_PackageNotFound" xml:space="preserve">
    <value>{0} was not found in NuGet feeds {1}.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_PackageNotSupported" xml:space="preserve">
    <value>The package {0} is not supported by installer {1}.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_UninstallGeneric" xml:space="preserve">
    <value>Failed to uninstall the package {0}.
Details: {1}.</value>
  </data>
  <data name="NuGetInstaller_InstallResut_Error_UpdateCheckGeneric" xml:space="preserve">
    <value>Failed to check the update for the package {0}.
Details: {1}.</value>
  </data>
  <data name="Scanner_Error_TemplatePackageLocationIsNotSupported" xml:space="preserve">
    <value>Template package location {0} is not supported, or doesn't exist.</value>
  </data>
  <data name="TemplateCreator_TemplateCreationResult_Error_CouldNotLoadTemplate" xml:space="preserve">
    <value>Could not load template.</value>
  </data>
  <data name="TemplateCreator_TemplateCreationResult_Error_CreationFailed" xml:space="preserve">
    <value>Failed to create template.
Details: {0}.</value>
  </data>
  <data name="TemplateCreator_TemplateCreationResult_Error_DestructiveChanges" xml:space="preserve">
    <value>Destructive changes detected.</value>
  </data>
  <data name="TemplateInfo_Warning_FailedToReadHostData" xml:space="preserve">
    <value>Failed to load host data in {0} at {1}.</value>
    <comment>{0} - path to template location, {1} relative path inside template location.</comment>
  </data>
  <data name="TemplatePackageManager_Error_FailedToScan" xml:space="preserve">
    <value>Failed to scan {0}.
Details: {1}</value>
    <comment>last line should not end with a period, period is a part of the format entry</comment>
  </data>
</root>