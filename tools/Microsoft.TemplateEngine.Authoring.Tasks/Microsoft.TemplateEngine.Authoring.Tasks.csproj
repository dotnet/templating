<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0</TargetFrameworks>
    <Description>MSBuild tasks for template authoring.</Description>
    <IsPackable>true</IsPackable>
    <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <!-- Microsoft.TemplateEngine.Authoring.Tasks.IntegrationTests needs a package for testing. -->
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Build.Framework" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" />
    <PackageReference Update="@(PackageReference)" PrivateAssets="All" />
    <ProjectReference Include="$(ToolsDir)\Microsoft.TemplateEngine.TemplateLocalizer.Core\Microsoft.TemplateEngine.TemplateLocalizer.Core.csproj" />
    <ProjectReference Include="$(SrcDir)Microsoft.TemplateEngine.Edge\Microsoft.TemplateEngine.Edge.csproj" />
    <ProjectReference Include="$(SrcDir)Microsoft.TemplateEngine.Orchestrator.RunnableProjects\Microsoft.TemplateEngine.Orchestrator.RunnableProjects.csproj" />
    <ProjectReference Update="@(ProjectReference)" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="build\*" PackagePath="build" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="LocalizableStrings.Designer.cs"
             DesignTime="True"
             AutoGen="True"
             DependentUpon="LocalizableStrings.resx" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="LocalizableStrings.resx"
                      Generator="ResXFileCodeGenerator"
                      LastGenOutput="LocalizableStrings.Designer.cs" />
  </ItemGroup>

  <!-- MSBuild tasks are invoked directly from the local package cache.
  Therefore, other NuGet dependencies are not available.
  To overcome this, we embed every assembly we need into our package
  using the globbing pattern "$(OutDir)/**/*" in "CopyProjectReferencesToPackage" target below.
  To prevent leftover files from being included in the generated package, we first clean the directory here.
  Doing this before "Restore" is the safest. If we do this late, the directory will already contain new files
  that shouldn't be deleted (such as satallite assemblies generated by Xliff-Tasks which happens pretty early).-->
  <Target Name="CleanOutputDirectory" BeforeTargets="Restore">
    <RemoveDir Directories="$(OutDir)"/>
  </Target>

  <Target Name="CopyProjectReferencesToPackage">
    <ItemGroup>
      <BuildOutputInPackage Include="$(OutDir)/**/*" Exclude="$(OutDir)/Microsoft.Build.Utilities.Core.dll;$(OutDir)/Microsoft.Build.Framework.dll" />
    </ItemGroup>
  </Target>

</Project>
